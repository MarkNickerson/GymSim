pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--------------------------------------------------------------------------------
-- acknowledgements
    -- misato for the base game outline
    -- pico monsters: https://www.lexaloffle.com/bbs/?pid=26810#p27211
    --

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- begin states
--------------------------------------------------------------------------------
game_states = {
  splash = 0,
  gym = 1,
  feather = 2,
  runner = 3,
  masher = 4,
  gameover = 5,
  boss = 6
}

boss_states = {
    boss_turn = 1,
    your_turn = 2,
    ran = 3,
    victory = 4,
    defeat = 5,
}
--------------------------------------------------------------------------------
-- end states
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
-- begin global variables
--------------------------------------------------------------------------------
state = game_states.splash
boss_state = boss_states.boss_turn

-- boss level things
-- what to print on the next boss move
boss_move = "the boss does something"
-- which workouts have been completed
completed_tasks = {true, true, true, true}
-- which boss options have been chosen
chosen_boss_options = {false, false, false, false}
-- text to show for each boss option
boss_fight_options = {"power", "speed", "agility", "escape"}
-- boss responses
boss_response = {}
boss_response["power"] = "the vacuum cannot handle your power"
boss_response["speed"] = "the vacuum cannot handle your speed"
boss_response["agility"] = "the vacuum cannot handle your agility"
boss_response["escape"] = "you manage to escape"
-- symbol to indicate option is selected
selected_symbol = "\130"
-- current selected option
selected_option = 1


player = {
  x = 8,
  y = 8,
  dx = 0,
  dy = 0,
  speed = 0.5, -- how far the player should travel over 60 seconds
  hearts = 3,
  cw = true,
  runningBoost = false,
  featherBoost = false,
  punchingBoost = false
}
feathers = {}
weights = {}
g = {x=0,y=0.5}
cam = {x = 0,y = 0}
solid = false
screen_size = 128
score = 0
show_feather = true
timer = 0
--------------------------------------------------------------------------------
-- end global variables
--------------------------------------------------------------------------------

function debug()
  --print(solid, player.x+3, player.y-11, 9)
  write("game state is " .. tostr(state), 0,0,4)
  -- for button=0,#isbuttonpressed - 1 do
  --   write("btn " .. tostr(button) .. " " .. tostr(wasbuttonreleased[button + 1]), 0,20 + button * 10, 4)
  -- end
  --if state == game_states.boss then
  -- write("boss state is " .. tostr(boss_state), 0,10,4)
  --end
end

-- state changes
function change_state(game)
  cls()
  if game == 1 then
    music(0)
    state = game_states.gym
  elseif game == 2 then
    state = game_states.feather
  elseif game == 3 then
    state = game_states.runner
  elseif game == 4 then
    state = game_states.atsume
  elseif game == 5 then
    state = game_states.gameover
  elseif game == 6 then
    music(8)
    boss_move = "a wild vacuum appears!"
    boss_state = boss_states.boss_turn -- reset boss state
    state = game_states.boss
  end
end

-- entities (aka player, enemies, etc)


-- add other vars as convenience to this player entity
-- for example, the sprite number or the lives left ;)
function solid_tile(x, y)
  local tilex = ((x - (x % 8)) / 8)
  local tiley = ((y - (y % 8)) / 8)

  if (fget(mget(tilex, tiley), 1)) then
    return true
  else
    return false
  end
end

function phys_input()
  local dt = time() - prev_t -- delta time, how much time has passed since last update
  local px = player.x

  -- simeltanious multi button player movement
  if btn(0) and player.canjump then -- left
    player.dx += -1 * player.speed * dt -- -1 makes us move left, dt allows for a ratio of player speed over time
    --if ()
    --end
  end

  if btn(1) and player.canjump then -- right
    player.dx += player.speed * dt
  end

  if btn(2) and player.canjump then
    player.jumping = true
    player.canjump = false
    player.jumpt = player.jumpdur
  end

  -- jumping
  if player.jumpt - dt < 0 then
    player.jumping = false
  end

  if player.jumping then
    player.dy = player.jump.y * dt
    player.jumpt -= dt
  end

  -- drag
  if player.canjump then
    if player.dx < -drag*dt then                -- need a minimum threshold here, can use a times 2 or times 3 value to get a tighter stop
      player.dx += drag * dt
    elseif player.dx > drag*dt then             -- need a maximum threshold
      player.dx += -1 * drag * dt
    else
      player.dx = 0
    end
  end

  -- gravity
  player.dx += g.x * dt -- g is a per second value and needs to be augmented by frame ratio
  player.dy += g.y * dt

  player.x += player.dx
  player.y += player.dy

  if player.y > floor then
    player.y = floor
    player.dy = 0
    player.jumping = false
    player.canjump = true
  end
  prev_t = time()
end


-- player input
function handle_input()
  -- move player
  local px = player.x

  -- left
  if btn(0) and not solid_tile(player.x-1, player.y) then
    player.dx = -2
    player.x -= 1 -- if implementing friction remove this
  end
  -- right
  if btn(1) and not solid_tile(player.x + 8 + 1, player.y)then
    player.dx = 2
    player.x += 1 -- if implementing friction remove this
  end
  -- up
  if btn(2) and not solid_tile(player.x, player.y-1)then
    player.dy = -2
    player.y -= 1
    if player.y < 8 then
        player.y = 8
    end
  end
  -- down
  if btn(3) and not solid_tile(player.x, player.y + 8 + 1)then
    player.dy = 2
    player.y += 1
  end
  -- to use the following we need friction to remove/reduce velocity
  --player.x += player.dx
  local xoffset = 0
  if player.dx > 0 then xoffset = 7 end

  local h = mget((player.x + xoffset)/8, (player.y+7)/8)

  if fget(h, 2) then
    change_state(2)
  end

  player.dy += 0.2
  if state == game_states.feather then
    player.y += player.dy
  end


end

-- pico8 game funtions
function _init()
  cls()
  music(0)
  -- start game time
  prev_t = time() -- we use past time per frame so we have framerate independent movement
end

function _update60()
  solid = solid_tile(player.x, player.y)
    if state == game_states.splash then
        update_splash()
    elseif state == game_states.gym then
        update_gym()
    elseif state == game_states.feather then
        update_feather()
    elseif state == game_states.runner then
        update_runner()
    elseif state == game_states.gameover then
        update_gameover()
    elseif state == game_states.boss then
        update_boss()
    end
end

function _draw()
  cls()
  if state == game_states.splash then
    draw_splash()
  elseif state == game_states.gym then
    draw_gym()
  elseif state == game_states.feather then
    draw_feather()
  elseif state == game_states.runner then
    draw_runner()
  elseif state == game_states.gameover then
    draw_gameover()
  elseif state == game_states.boss then
    draw_boss()
  end
end


-- splash

function update_splash()
    -- usually we want the player to press one button
     if btnp(5) then
         change_state(6) -- change state to gym scene
     end
end

function draw_splash()
    rectfill(0,0,screen_size,screen_size,11)
    local text = "gym sim!"
    write(text, text_x_pos(text), 52,7)
end

-- game
x = screen_size  y = screen_size
function update_gym()
    handle_input()
end

function draw_gym()
  -- draw map
  map(0, 0, 0, 0, 128, 32)
  -- draw player sprite
  spr(1, player.x, player.y)
end

-- feather minigame
function update_feather()
    handle_input()
end

function draw_feather()
  cls()
  -- draw map
  map(16, 0, 0, 0, 128, 32)
  -- draw player sprite
  spr(5, player.x, player.y)
end

-- runner game
function update_runner()
    phys_input()
end

function draw_runner()
  cls()
  -- draw map
  map(16, 0, 0, 0, 128, 32)
  -- draw player sprite
  spr(5, player.x, player.y)
end

-- game over

function update_gameover()

end

function draw_gameover()
  rectfill(0,0,screen_size,screen_size,11)
  local text = "gym sim byee!"
  write(text, text_x_pos(text), 52,7)

end

-- boss
function update_boss()
  if boss_state == boss_states.victory then
    boss_move = "you defeated the vacuum"
    -- go to end screen if victory
    if btnp(5) then
      change_state(1)
    end
  end

  if boss_state == boss_states.boss_turn then
    -- enemy turn, can only advance text
    if btnp(5) then
      if selected_option == 4 then
        -- ran away, return to gym
        change_state(1)
      end
      -- advance to your turn
      boss_state = boss_states.your_turn

      -- reset current selected option
      for i=1,#chosen_boss_options do
        if not chosen_boss_options[i] and completed_tasks[i] then
          selected_option = i
          break
        end
      end


      local is_boss_defeated = true
      for i=1,#chosen_boss_options - 1 do -- do not count escape as a necessary option
        is_boss_defeated = is_boss_defeated and chosen_boss_options[i]
      end
      if is_boss_defeated then
        boss_state = boss_states.victory
      end
    end
    return
  end

  -- check if option has changed

  local original_option = selected_option
  if btnp(2) then
    selected_option = get_prev_option_index(selected_option)

    sfx(20)
  elseif btnp(3) then
    selected_option = get_next_option_index(selected_option)
    sfx(20)
  end

  if selected_option < 1 then
    selected_option = 1
  elseif selected_option > #boss_fight_options then
    selected_option = #boss_fight_options
  end

  if btnp(5) then
    -- an option has been selected
    if completed_tasks[selected_option] then
      -- did the workout for this option
      chosen_boss_options[selected_option] = true
      boss_move = boss_response[boss_fight_options[selected_option]]
      boss_state = boss_states.boss_turn
      sfx(21)
    else
      -- play bad sound
      sfx(33)
      return
    end
  end
end

function draw_boss()
  -- draw player sprite
  spr(5, 20, 60)

  -- draw boss
  spr(5, 100, 20)

  -- draw action box
  rect(0, 120, 118, 70, 4)
  rect(4, 116, 114, 74, 4)
  if boss_state == boss_states.your_turn then
    draw_boss_menu()
  end

  if boss_state == boss_states.boss_turn or boss_state == boss_states.victory then
    write_with_bounds(boss_move, 10,80, 3)
  end
end

function draw_boss_menu()
  local text_spacing = 10
  local menu_offset = {}
  menu_offset["x"] = 10
  menu_offset["y"] = 65

  for i = 1,#completed_tasks do
    if completed_tasks[i] and not chosen_boss_options[i] then
      -- task has been completed and option not chosen yet so draw it
      if selected_option == i then
        write_with_bounds(selected_symbol .. boss_fight_options[i], menu_offset.x,menu_offset.y + text_spacing * i,5)
      else
        write_with_bounds(" " .. boss_fight_options[i], menu_offset.x,menu_offset.y + text_spacing * i,5)
      end
    end
  end
end

-- utils


-- finds the next valid option from boss fight menu
function get_next_option_index(cur)
  for i=cur + 1,#boss_fight_options do
    if not chosen_boss_options[i] and completed_tasks[i] then
      return i
    end
  end
  return cur -- no more options
end

-- finds the previous valid option from boss fight menu
function get_prev_option_index(cur)
  for i=cur - 1,1,-1 do
    if not chosen_boss_options[i] and completed_tasks[i] then
      return i
    end
  end
  return cur -- no more options
end



function issolid(x, y)
  val=mget(x, y)

 -- check if flag 1 is set (the
 -- orange toggle button in the
 -- sprite editor)
 return fget(val, 1)
end

-- change this if you use a different resolution like 64x64
screen_size = 128


-- calculate center position in x axis
-- this is asuming the text uses the system font which is 4px wide
function text_x_pos(text)
    local letter_width = 4

    -- first calculate how wide is the text
    local width = #text * letter_width

    -- if it's wider than the screen then it's multiple lines so we return 0
    if width > screen_size then
        return 0
    end

   return screen_size / 2 - flr(width / 2)

end

-- prints black bordered text
function write(text,x,y,color)
    for i=0,2 do
        for j=0,2 do
            print(text,x+i,y+j, 0)
        end
    end
    print(text,x+1,y+1,color)
end

-- prints black bordered text and wraps around to next line
function write_with_bounds(text,base_x,base_y,color, x_bound)
  if (x_bound == nil) then
    x_bound = screen_size
  end
  local tokens = mysplit(text)
  local xpos = base_x
  for i=1,#tokens do
    local word_length = (#(tokens[i]) + 1) * 4
    if word_length + xpos >= x_bound then
      -- go to next line, reset x position
      base_y = base_y + 8
      xpos = base_x
    end
    write(tokens[i] .. " ",xpos,base_y,color)
    xpos += word_length
  end
end

-- splits string into list
function mysplit(inputstr, sep)
  if sep == nil then
    sep = " "
  end
  local t={}
  local word = ""
  word = sub(inputstr, 0, 0)
  for i=1, #inputstr + 1 do
     local char = sub(inputstr,i, i)
     if char == sep then
       t[#t + 1] = word
       word = ""
     else
       word = word .. char
     end
  end
  t[#t + 1] = word
  return t
end


-- returns if module of a/b == 0. equals to a % b == 0 in other languages
function mod_zero(a,b)
   return a - flr(a/b)*b == 0
end

__gfx__
00000000000330009999999900000000888888880200002000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000ff0009000000900055000800000080222222000000000000000000000000000000000000000000000000000000000000000000000000000000000
007007000f8558f09000000900500500800000080299992000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000ff8558ff9000000905000800800000080129921000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000f099990f90000009500000c0800000080129921000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700005555009000000950000a0080000008d112211d00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000f00f0090000009500000b080000008dddddddd00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000040040099999999500000008888888800dddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001020402010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0202020202020202020202020202020204040404040404040404040404040404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000000000b0c00000204001c00000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000000003001b1c00000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000200000000000000000000000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000200000000000000000000000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000200000000000000000000000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000204000000000004040400000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000204000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000204000004000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000204000004000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0202020202020202020202020202020204040404040404040404040404040404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010e00000c055000000c0550000013055000000c055000000c055000000c0550000015055000000c055000000c055000000c0550000015055000001305500000110550000010055000000e055000000c05500000
010e00001005300000000000000010053000000000000000100530000000000000001005300000000001005310053000000000000000100530000000000000000c053000000e0530000010053000001105300000
010e00000c1500c15000000101500000011150000001115013150000001115010150000000c1500e150000000e1500e1500000011150000001315000000131501115000000101500e150000000e1500c15000000
010e00000c1700c170000001114000000101400c140000001314010140000000c1400e140000000e140000000e1501015000000101501115000000111501315000000101500e150000000e1500c1500c15000000
010e00000c1500c15000000101500000011150000001115013150000001115010150000000c1500e150000000e1500e1500000010150101500000011150111501315000000151500000017150000001815018150
010e00000c1500c15000000101500000011150000001115013150000001115010150000000c1500e150000000c1500e150000000c1500e150000000c1500e15010150000000e150000000c1500c1500000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800001075000000107500000013750000001075000000107500000010750000001375000000107500000010750000001075000000157500000010750000001075000000107500000013750000001075000000
010800000c635000040000000000000000000000000000000c6350000000000000000000000000000000000011635000000000000000000000000000000000001063500000106350000015635000001063500000
0108000010140000000e1400000010140000000e14000000131400000013140000001014000000000000000010140000001014000000111400000010140000000000000000000000000000000000000000000000
010800001d542000001d5421d5421d542000001c542000001a542000001a5421a5421a542000001c542000001a542000001c5421c5421a542000001c542000001c542000001d5420000021542000000000000000
011000001d542000001d542000001d542000001d542000001c542000001c542000001c542000001c542000001a54200000000001a542000001a542000001d5421c54200000000000000000000000000000000000
011000001a54200000000001a542000001a542000001d5421c5420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800001d542000001d5421d5421d542000001c542000001a542000001a5421a5421a542000001c5420000018542000001a542000001a542000001a542000001854218542000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
011000002803500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800002d04000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
010800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01040000150502b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01020000070500f050140501d05024000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000600000000009310033100131007000050000300001000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000300002575028750010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000400002875035720287500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__music__
01 00014244
00 00010244
00 00010344
00 00010244
00 00010344
02 00010444
00 41424344
00 49424344
01 090a4b44
00 08090a4b
00 08090a0b
00 08090a4c
00 08090a0e
00 08090a44
00 08090a0c
02 08090a0d
